version: '3.8'

services:
  data-aggregation:
    build: .
    container_name: data-aggregation-service
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - DB_HOST=mysql
      - DB_PORT=3306
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_NAME=${DB_NAME}
      - OSS_REGION=${OSS_REGION}
      - OSS_ACCESS_KEY_ID=${OSS_ACCESS_KEY_ID}
      - OSS_ACCESS_KEY_SECRET=${OSS_ACCESS_KEY_SECRET}
      - OSS_BUCKET=${OSS_BUCKET}
      - CRON_SCHEDULE=${CRON_SCHEDULE:-0 0 2 * * *}
      - AGGREGATION_TABLES=${AGGREGATION_TABLES:-users,orders,products}
      - OUTPUT_FORMAT=${OUTPUT_FORMAT:-json}
      - LOG_LEVEL=${LOG_LEVEL:-info}
    volumes:
      - ./logs:/app/logs
      - ./temp:/app/temp
    depends_on:
      - mysql
    networks:
      - data-network

  mysql:
    image: mysql:8.0
    container_name: data-aggregation-mysql
    restart: unless-stopped
    environment:
      - MYSQL_ROOT_PASSWORD=${DB_PASSWORD}
      - MYSQL_DATABASE=${DB_NAME}
      - MYSQL_USER=${DB_USER}
      - MYSQL_PASSWORD=${DB_PASSWORD}
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - data-network

  nginx:
    image: nginx:alpine
    container_name: data-aggregation-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - data-aggregation
    networks:
      - data-network

volumes:
  mysql_data:

networks:
  data-network:
    driver: bridge